import java.util.*;

class Buffer {
    Queue<Integer> queue = new LinkedList<>();
    int capacity = 5;

    public synchronized void produce(int value) throws InterruptedException {
        while (queue.size() == capacity) wait();
        queue.add(value);
        System.out.println("Produced: " + value);
        notify();
    }

    public synchronized void consume() throws InterruptedException {
        while (queue.isEmpty()) wait();
        int val = queue.poll();
        System.out.println("Consumed: " + val);
        notify();
    }
}

public class ProducerConsumer {
    public static void main(String[] args) {
        Buffer buffer = new Buffer();

        Thread producer = new Thread(() -> {
            int value = 0;
            while (true) {
                try { buffer.produce(value++); Thread.sleep(500); } 
                catch (InterruptedException e) {}
            }
        });

        Thread consumer = new Thread(() -> {
            while (true) {
                try { buffer.consume(); Thread.sleep(1000); } 
                catch (InterruptedException e) {}
            }
        });

        producer.start();
        consumer.start();
    }
}
